# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.

stages:
  - build-app
  - build-docker
  - deploy
  - test

app-build:
  image:
    name: node:20.9.0-alpine3.18
    entrypoint: [""]
  stage: build-app
  artifacts:
    untracked: false
    when: on_success
    paths:
      - dist.staging
      - dist.production
    expire_in: "14 days"
  cache:
    - key: package-cache
      paths:
        - .yarn/cache/
      when: on_success
  script:
    - apk add --no-cache libc6-compat
    - YARN_ENABLE_GLOBAL_CACHE=false yarn install --immutable
    
    - yarn format-check
    - if [[ "$CI_SKIP_LINT" != "true" ]]; then yarn lint; fi
    - echo "BUILD_NUMBER=${CI_PIPELINE_IID}" >> env.staging
    - echo "BUILD_NUMBER=${CI_PIPELINE_IID}" >> env.production

    - rm -f .env .env.example

    - cp env.staging .env
    - EXPO_ROUTER_IMPORT_MODE_WEB=lazy yarn expo export:web
    - mv web-build dist.staging
    
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        cp env.production .env
        EXPO_ROUTER_IMPORT_MODE_WEB=lazy yarn expo export:web -c
        mv web-build dist.production
      fi

docker-build:
  image:
    name: gcr.io/kaniko-project/executor:v1.17.0-debug
    entrypoint: [""]
  stage: build-docker
  dependencies:
    - app-build
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=":latest"
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi

    - cp -a dist.staging dist
    - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile" --destination "${CI_REGISTRY_IMAGE}${tag}.staging"

    - |
      if [[ -d "dist.production" ]]; then
        rm -rf dist
        cp -a dist.production dist
        /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile" --destination "${CI_REGISTRY_IMAGE}${tag}.production"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

deploy-staging:
  image: alpine/curl:latest
  stage: deploy
  script:
    - curl --fail --request POST --form token="${TRIGGER_TOKEN}" --form ref=master --form "variables[DEPLOY_IMAGE]=app" --form "variables[DEPLOY_ENV]=staging" "https://gitlab.harvestangels.co/api/v4/projects/12/trigger/pipeline"
  only:
    - master

sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml

